/*
 * User MicroService
 *
 * Microservicio de acceso a legado de Usuarios
 *
 * OpenAPI spec version: 0.0.1
 * Contact: raul.lapitzondo@it2insurance.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IdNumberApiController : ControllerBase
    { 
        /// <summary>
        /// GET-User/{id_user}
        /// </summary>
        /// <remarks>Obtiene datos de un usuario</remarks>
        /// <param name="idUser">Id de Usuario.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request    List of supported error codes:    20: Invalid URL parameter value  25: Missing header  26: Invalid header value  27: Missing query-string parameter  28: Invalid query-string parameter value  </response>
        /// <response code="404">Not Found    List of supported error codes:    60: Resource not found</response>
        /// <response code="405">Method Not Allowed    List of supported error codes:    61: Method not allowed</response>
        /// <response code="422">Unprocessable entity Functional error    List of supported error codes:    11: Functional Error</response>
        /// <response code="500">Internal Server Error    List of supported error codes:    1: Internal error</response>
        [HttpGet]
        [Route("/rlapitzondo/restserviceusers/0.0.1/users/{id_user}")]
        [ValidateModelState]
        [SwaggerOperation("GETUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(Users), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request    List of supported error codes:    20: Invalid URL parameter value  25: Missing header  26: Invalid header value  27: Missing query-string parameter  28: Invalid query-string parameter value  ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found    List of supported error codes:    60: Resource not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Method Not Allowed    List of supported error codes:    61: Method not allowed")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable entity Functional error    List of supported error codes:    11: Functional Error")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error    List of supported error codes:    1: Internal error")]
        public virtual IActionResult GETUsers([FromRoute][Required]string idUser)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Users));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "\" - id: string nombre: string apellido: string email: string\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Users>(exampleJson)
                        : default(Users);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
